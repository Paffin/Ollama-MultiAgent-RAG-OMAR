import streamlit as st
from datetime import datetime
from typing import Dict, Any
from .components import (
    AgentChain,
    AnalyticsDashboard,
    DataProcessingPanel,
    NotificationPanel,
    SettingsPanel
)
from utils.logger import Logger

logger = Logger()

def run(systems: Dict[str, Any]) -> None:
    """
    –ó–∞–ø—É—Å–∫ Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    
    Args:
        systems: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
    """
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        st.set_page_config(
            page_title="OMAR - MultiAgent System",
            page_icon="ü§ñ",
            layout="wide"
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
        if 'agent_chain' not in st.session_state:
            st.session_state.agent_chain = []
        if 'agent_metrics' not in st.session_state:
            st.session_state.agent_metrics = {}
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        st.title("OMAR - MultiAgent System with RAG and Analytics")
        
        # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
        with st.sidebar:
            st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            theme = st.selectbox(
                "–¢–µ–º–∞",
                ["light", "dark"],
                index=0
            )
            
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        st.header("–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º")
        
        # –°—Ç–∞—Ç—É—Å Ollama
        st.subheader("Ollama")
        ollama_status = "üü¢ –î–æ—Å—Ç—É–ø–µ–Ω" if systems['config'].ollama.base_url else "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        st.write(f"–°—Ç–∞—Ç—É—Å: {ollama_status}")
        
        # –°—Ç–∞—Ç—É—Å –∫—ç—à–∞
        st.subheader("–ö—ç—à")
        cache_status = "üü¢ –í–∫–ª—é—á–µ–Ω" if systems['cache'].enabled else "üî¥ –í—ã–∫–ª—é—á–µ–Ω"
        st.write(f"–°—Ç–∞—Ç—É—Å: {cache_status}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        st.subheader("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        notifications = systems['notifications']
        st.write(f"–í—Å–µ–≥–æ: {len(notifications.get_notifications())}")
        st.write(f"–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {len(notifications.get_unread_notifications())}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        st.subheader("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
        analytics = systems['analytics']
        st.write("–ú–µ—Ç—Ä–∏–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤:")
        for agent, stats in analytics.get_agent_stats().items():
            st.write(f"- {agent}: {stats}")
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        st.subheader("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        data_processor = systems['data_processor']
        st.write("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:")
        for fmt in data_processor.supported_formats:
            st.write(f"- {fmt}")
        
        # –í–∫–ª–∞–¥–∫–∏
        tab1, tab2, tab3, tab4 = st.tabs(["–û—Å–Ω–æ–≤–Ω–æ–π", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "–î–∞–Ω–Ω—ã–µ", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"])
        
        with tab1:
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
            user_query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:")
            if st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å"):
                if user_query:
                    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ü–µ–ø–æ—á–∫—É
                    st.session_state.agent_chain = []
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
                    start_time = datetime.now()
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    log_chain("system", "start", "–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
                    add_notification("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", "info", "system", 3)
                    
                    try:
                        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                        processed_data = systems['data_processor'].process_text(user_query)
                        log_chain("data_processor", "validation", "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                        
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∞–≥–µ–Ω—Ç–æ–≤
                        systems['analytics'].update_usage_stats(
                            agent_name="planner",
                            success=True,
                            response_time=(datetime.now() - start_time).total_seconds(),
                            quality_score=0.8,
                            resource_usage=0.5
                        )
                        
                        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        st.markdown("### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                        st.json(processed_data)
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                        log_chain("system", "success", "–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                        add_notification("–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", "success", "system", 4)
                        
                    except Exception as e:
                        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                        log_chain("system", "error", f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
                        add_notification(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}", "error", "system", 5)
                        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ü–µ–ø–æ—á–∫—É —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤
                    AgentChain(st.session_state.agent_chain).render()
                    
                else:
                    st.warning("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞")
                
        with tab2:
            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            analytics_data = {
                'total_stats': systems['analytics'].get_all_stats(),
                'efficiency_scores': {
                    agent: systems['analytics'].get_efficiency_score(agent)
                    for agent in systems['analytics'].get_all_stats()
                },
                'usage_plots': systems['analytics'].generate_usage_plots(),
                'performance_plots': systems['analytics'].generate_performance_plots()
            }
            AnalyticsDashboard(analytics_data).render()
            
        with tab3:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            DataProcessingPanel(
                systems['data_processor'],
                systems['data_validator'],
                systems['data_preprocessor']
            ).render()
            
        with tab4:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            SettingsPanel(systems['config']).render()
            
        # –ü–∞–Ω–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        NotificationPanel(systems['notifications']).render()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏: {str(e)}")
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def log_chain(agent_name: str, step_type: str, content: str):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–≥–∞ –≤ —Ü–µ–ø–æ—á–∫–µ –∞–≥–µ–Ω—Ç–æ–≤"""
    if 'agent_chain' not in st.session_state:
        st.session_state.agent_chain = []
        
    st.session_state.agent_chain.append({
        'agent': agent_name,
        'type': step_type,
        'content': content,
        'timestamp': datetime.now()
    })
    
def add_notification(message: str, type: str, source: str, priority: int):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    if 'notifications' not in st.session_state:
        st.session_state.notifications = []
        
    st.session_state.notifications.append({
        'message': message,
        'type': type,
        'source': source,
        'priority': priority,
        'timestamp': datetime.now()
    }) 